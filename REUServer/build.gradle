/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.1/userguide/java_library_plugin.html
 */

plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'application'
    id 'maven-publish'
    id 'signing'
}

// name is set in settings.gradle
group = 'io.github.andrewquijano'
version = System.getenv("VERSION") ?: "2.0.0"

// https://www.baeldung.com/gradle-sourcecompatiblity-vs-targetcompatibility
java {
    withJavadocJar()
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.mysql/mysql-connector-j
    implementation 'com.mysql:mysql-connector-j:9.3.0'

    // https://mvnrepository.com/artifact/io.github.andrewquijano/ciphercraft
    implementation 'io.github.andrewquijano:ciphercraft:1.0.6'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13.2'

    // Make sure log4j-core is used in testing too
    testImplementation 'org.apache.logging.log4j:log4j-core:2.24.3'
}

application {
    mainClass.set('edu.fiu.adwise.fingerprint_localization.server')
}

// To create the JAR file with 'gradlew jar'
tasks.named('jar') {
    archiveFileName = "${project.name}-${project.version}.jar"
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': System.getenv('VERSION') ?: project.version
        )
    }
}

test {
    testLogging {
// Make sure output from
// standard out or error is shown
// in Gradle output.
        showStandardStreams = true
    }
}

tasks.register('generateJavadoc', Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    options.encoding = 'UTF-8'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption('Xdoclint:none', '-quiet')
    options.docTitle = 'Fingerprint Server Localization API'
}

// This is for publishing the library to Maven Central
publishing {
    publications {
        register("mavenJava", MavenPublication) {
            from components.java

            pom {
                name.set('fingerprint_localization')
                description.set('This package is the JAR file used for secure indoor localization using Wi-Fi fingerprints. ' +
                        'This utilizes homomorphic encryption to preserve privacy')
                url.set('https://github.com/adwise-fiu/Secure_Indoor_Localization')

                licenses {
                    license {
                        name.set('MIT License')
                        url.set('https://opensource.org/licenses/MIT')
                    }
                }

                developers {
                    developer {
                        id.set('AndrewQuijano')
                        name.set('Andrew Quijano')
                        email.set('andrew.quijano@nyu.edu')
                        roles.add('Lead Developer')
                        organization {
                            name.set('New York University')
                            url.set('https://www.nyu.edu')
                        }
                    }
                }

                scm {
                    connection.set('scm:git:git://github.com/adwise-fiu/Secure_Indoor_Localization.git')
                    developerConnection.set('scm:git:ssh://github.com:adwise-fiu/Secure_Indoor_Localization.git')
                    url.set('https://github.com/adwise-fiu/Secure_Indoor_Localization')
                }
            }
        }
    }
}

// Update this file, ~/.gnupg/dirmngr.conf
// and add this line to the file 'keyserver hkps://keyserver.ubuntu.com'
// then run 'gpg --send-keys YOUR_KEY_ID'
signing {
    // Point to the key file on your machine, used for local testing
    def signingKeyFile = findProperty("signingKeyFile") ?: System.getenv("SIGNING_KEY_FILE")
    // gpg --armor --export-secret-keys YOUR_KEY_ID, export the key into a secret
    def signingKey = findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
    // If no property or environment variable is found, it will be empty password
    def signingPassword = findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD") ?: ""

    if (signingKeyFile) {
        println("Reading signing key from file: $signingKeyFile")
        def signingKey_content = new File(signingKeyFile.toString()).text
        useInMemoryPgpKeys(signingKey_content.toString(), signingPassword.toString())
        publishing.publications.named("mavenJava").configure { publication ->
            signing.sign(publication)
        }
    }
    else {
        println("No signing key file found, will attempt to use in-memory key")
        if (signingKey) {
            useInMemoryPgpKeys(signingKey.toString(), signingPassword?.toString())
            publishing.publications.named("mavenJava").configure { publication ->
                signing.sign(publication)
            }
        }
        else {
            println("No signing key found. Skipping signing.")
        }
    }
}